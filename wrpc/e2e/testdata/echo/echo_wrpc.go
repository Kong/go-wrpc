// Code generated by protoc-gen-go-wrpc. DO NOT EDIT
// protoc-gen-go-wrpc version: (devel)

package echo

import (
	context "context"
	wrpc "github.com/kong/go-wrpc/wrpc"
)

type Echo interface {
	Echo(context.Context, *EchoRPCRequest) (*EchoRPCResponse, error)
	Sleep(context.Context, *SleepRequest) (*SleepResponse, error)
	ProtocolError(context.Context, *ProtocolErrorRequest) (*ProtocolErrorResponse, error)
}

type EchoClient struct {
	Peer *wrpc.Peer
}

func (c *EchoClient) Echo(ctx context.Context, in *EchoRPCRequest) (*EchoRPCResponse, error) {
	var out EchoRPCResponse
	err := c.Peer.Do(ctx, 1, 1, in, &out)
	if err != nil {
		return nil, err
	}

	return &out, nil
}

func (c *EchoClient) Sleep(ctx context.Context, in *SleepRequest) (*SleepResponse, error) {
	var out SleepResponse
	err := c.Peer.Do(ctx, 1, 2, in, &out)
	if err != nil {
		return nil, err
	}

	return &out, nil
}

func (c *EchoClient) ProtocolError(ctx context.Context, in *ProtocolErrorRequest) (*ProtocolErrorResponse, error) {
	var out ProtocolErrorResponse
	err := c.Peer.Do(ctx, 1, 3, in, &out)
	if err != nil {
		return nil, err
	}

	return &out, nil
}

type EchoServer struct {
	Echo Echo
}

func (s *EchoServer) ID() wrpc.ID {
	return 1
}

func (s *EchoServer) RPC(rpc wrpc.ID) wrpc.RPC {
	switch rpc {
	case 1:
		return wrpc.RPCImpl{
			HandlerFunc: func(ctx context.Context, decode func(interface{}) error) (interface{}, error) {
				var in EchoRPCRequest
				err := decode(&in)
				if err != nil {
					return nil, err
				}
				return s.Echo.Echo(ctx, &in)
			},
		}
	case 2:
		return wrpc.RPCImpl{
			HandlerFunc: func(ctx context.Context, decode func(interface{}) error) (interface{}, error) {
				var in SleepRequest
				err := decode(&in)
				if err != nil {
					return nil, err
				}
				return s.Echo.Sleep(ctx, &in)
			},
		}
	case 3:
		return wrpc.RPCImpl{
			HandlerFunc: func(ctx context.Context, decode func(interface{}) error) (interface{}, error) {
				var in ProtocolErrorRequest
				err := decode(&in)
				if err != nil {
					return nil, err
				}
				return s.Echo.ProtocolError(ctx, &in)
			},
		}
	default:
		return nil
	}
}
